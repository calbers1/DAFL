///*
//Program Description: This program tests the dataFile class for
//two specific errors dealing with access. 1) Does putRecord allow
//a record to be stored outside the 0 to recordCount range? (lines 67-80)
//2) Does getRecord retrieve records outside the 0 to recordCount-1
//range? (lines 111-117)
//*/
//
//#include <iostream>
//#include "dafl.h"
//
//using namespace std;
//
////Program constants
//const short MAXNAMELENGTH = 19;
//const short WRITETOFILE_ERROR = 1;
//const short READFROMFILE_ERROR = 2;
//const short CREATEFILE_ERROR = 3;
//
////the fixed-length record structure used in this application
//struct student
//{
//	char name[MAXNAMELENGTH + 1];
//	float gpa;
//	int classification;
//};
//
///*
//This function will use the dataFile object s (abbreviation for student)
//to add records to the input/output file.  The user of the application
//will respond to prompts generated by this function to get data stored
//and saved in the file.
//*/
//void addRecords(dataFile & s)
//{
//	char response;
//
//	//loop that controls data entry and record storage on file
//	do
//	{
//		cout << "enter a record (y/n): ";
//		cin >> response;
//		//remove return character from input stream
//		cin.get();
//		if (tolower(response) == 'y')
//		{
//			//create a student structure variable to store record information to save
//			//on file
//			student studentRec;
//
//			//get student name
//			cout << "Name: ";
//			cin.getline(studentRec.name, MAXNAMELENGTH + 1);
//
//			//get student gpa
//			cout << "GPA: ";
//			cin >> studentRec.gpa;
//			//remove return character from input stream
//			cin.get();
//
//			//get student classification
//			cout << "Classification (4=sr, 3=jr, 2=so, 1=fr): ";
//			cin >> studentRec.classification;
//			//remove return character from stream
//			cin.get();
//
//			/*****************************************************************
//			ERROR CHECKING, does the put operation allow an out-of-range RRN
//			*****************************************************************/
//			int rrn;
//			cout << "enter a relative record number where to store record: " << endl;
//			cin >> rrn;
//			cin.get();
//
//			//using dataFile object s, write this record to file; it must have
//			//the relative record number (index) on file where to write to and 
//			//and the starting address in memory of the data that needs to be
//			//saved to file. Using the value from recordCount will append this
//			//record to file. THIS SHOULD FAIL ON A BAD RRN INPUT!!
//			s.putRecord(rrn, &studentRec);
//
//			//did the write operation work?
//			if (s.fileStatus() == fsPutFail)
//			{
//				cerr << "error writing record...program exiting" << endl;
//				exit(WRITETOFILE_ERROR);
//			}
//
//			//add one to the count of records that are saved on file
//			s.updateRecordCount(1);
//		}
//	} while (response == 'y');
//}
//
//
///*
//This function will print out the records currently saved on file using
//the dataFile object s.
//*/
//void printRecords(dataFile & s)
//{
//	//loop through all the records stored on file getting the count from 
//	//the class function recordCount
//	for (int i = 0; i < s.recordCount(); i++)
//	{
//		//create a program variable to store the record read from file and then
//		//get the record from file
//		student studentRec;
//
//		/************************************************************************
//		ERROR CHECKING, does the get operation retrieve an out-of-range rrn?
//		************************************************************************/
//		s.getRecord(10, &studentRec);
//
//		//make sure the read from file FAILED!!
//		if (s.fileStatus() == fsGetFail)
//		{
//			cerr << "program could not get a record...program exiting" << endl;
//			exit(READFROMFILE_ERROR);
//		}
//		else
//		{
//			//record was read into the struct variable, now output the data
//			cout << "RECORD #: " << i << "  "
//				<< "NAME: " << studentRec.name << "  "
//				<< "GPA: " << studentRec.gpa << "  "
//				<< "CLASSIFICATION: " << studentRec.classification
//				<< endl;
//		}
//	}
//	cout << "Total of " << s.recordCount() << " records" << endl << endl;
//}
//
//int main()
//{
//	//Object used to do file processing
//	dataFile students;
//	//c-string variable to store a file name
//	const short MAXFILENAMELENGTH = 80;
//	char fileName[MAXFILENAMELENGTH + 1];
//
//	//get the file name from the user
//	cout << "Enter file to open: ";
//	cin.getline(fileName, MAXFILENAMELENGTH + 1);
//
//	//Open the file to allow file processing
//
//	students.openFile(fileName);
//
//	//Did the open fail? Use class method fileStatus
//	if (students.fileStatus() == fsOpenFail)
//	{
//		cout << "File does not exist, create it? (y/n): ";
//		char response;
//		cin >> response;
//		//remove return from input stream
//		cin.get();
//		if (tolower(response) == 'y')
//		{
//			//Create a file to store student records using a dataFile object
//			//It needs the name of the file and fixed-length size of each record
//			students.createFile(fileName, sizeof student);
//
//			//Did the createFile work?  If not, exit with an error message
//			if (students.fileStatus() == fsCreateFail)
//			{
//				cerr << "file could not be created...program exiting" << endl;
//				exit(CREATEFILE_ERROR);
//			}
//		}
//		else
//		{
//			//If a user does not want to create a file, exit with success
//			cout << "program exiting" << endl;
//			exit(EXIT_SUCCESS);
//		}
//	}
//
//	//add records to the file
//	addRecords(students);
//
//	//print the records that are on file
//	printRecords(students);
//
//	//close the file to make sure all updates to file are indeed written
//	students.closeFile();
//	if (students.fileStatus() == fsSuccess)
//		cout << "All data saved on file" << endl;
//
//	return EXIT_SUCCESS;
//}
//
//
